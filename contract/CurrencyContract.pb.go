// Code generated by protoc-gen-go.
// source: CurrencyContract.proto
// DO NOT EDIT!

/*
Package services is a generated protocol buffer package.

It is generated from these files:
	CurrencyContract.proto

It has these top-level messages:
	Currency
	CurrenciesResponse
	GetAllRequest
*/
package services

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Currency struct {
	Id   int64  `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Code string `protobuf:"bytes,3,opt,name=Code" json:"Code,omitempty"`
}

func (m *Currency) Reset()                    { *m = Currency{} }
func (m *Currency) String() string            { return proto.CompactTextString(m) }
func (*Currency) ProtoMessage()               {}
func (*Currency) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CurrenciesResponse struct {
	Currencies []*Currency `protobuf:"bytes,1,rep,name=Currencies" json:"Currencies,omitempty"`
}

func (m *CurrenciesResponse) Reset()                    { *m = CurrenciesResponse{} }
func (m *CurrenciesResponse) String() string            { return proto.CompactTextString(m) }
func (*CurrenciesResponse) ProtoMessage()               {}
func (*CurrenciesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CurrenciesResponse) GetCurrencies() []*Currency {
	if m != nil {
		return m.Currencies
	}
	return nil
}

type GetAllRequest struct {
}

func (m *GetAllRequest) Reset()                    { *m = GetAllRequest{} }
func (m *GetAllRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAllRequest) ProtoMessage()               {}
func (*GetAllRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*Currency)(nil), "services.Currency")
	proto.RegisterType((*CurrenciesResponse)(nil), "services.CurrenciesResponse")
	proto.RegisterType((*GetAllRequest)(nil), "services.GetAllRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for ProductService service

type ProductServiceClient interface {
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*CurrenciesResponse, error)
}

type productServiceClient struct {
	cc *grpc.ClientConn
}

func NewProductServiceClient(cc *grpc.ClientConn) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*CurrenciesResponse, error) {
	out := new(CurrenciesResponse)
	err := grpc.Invoke(ctx, "/services.ProductService/GetAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProductService service

type ProductServiceServer interface {
	GetAll(context.Context, *GetAllRequest) (*CurrenciesResponse, error)
}

func RegisterProductServiceServer(s *grpc.Server, srv ProductServiceServer) {
	s.RegisterService(&_ProductService_serviceDesc, srv)
}

func _ProductService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ProductServiceServer).GetAll(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _ProductService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _ProductService_GetAll_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x73, 0x2e, 0x2d, 0x2a,
	0x4a, 0xcd, 0x4b, 0xae, 0x74, 0xce, 0xcf, 0x2b, 0x29, 0x4a, 0x4c, 0x2e, 0xd1, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0xe2, 0x28, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x2d, 0x56, 0x32, 0xe2, 0xe2,
	0x80, 0xa9, 0x11, 0xe2, 0xe2, 0x62, 0xf2, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x16, 0xe2,
	0xe1, 0x62, 0xf1, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x02, 0xf2, 0x38, 0x41, 0x3c, 0xe7, 0xfc, 0x94,
	0x54, 0x09, 0x66, 0x10, 0x4f, 0xc9, 0x86, 0x4b, 0x08, 0xaa, 0x27, 0x33, 0xb5, 0x38, 0x28, 0xb5,
	0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0x48, 0x8d, 0x8b, 0x0b, 0x21, 0x0a, 0x34, 0x85, 0x59, 0x83,
	0xdb, 0x48, 0x48, 0x0f, 0x66, 0x91, 0x1e, 0xcc, 0x16, 0x25, 0x7e, 0x2e, 0x5e, 0xf7, 0xd4, 0x12,
	0xc7, 0x9c, 0x9c, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0xa3, 0x60, 0x2e, 0xbe, 0x80, 0xa2,
	0xfc, 0x94, 0xd2, 0xe4, 0x92, 0x60, 0x88, 0x62, 0x21, 0x47, 0x2e, 0x36, 0x88, 0x12, 0x21, 0x71,
	0x84, 0x01, 0x28, 0x9a, 0xa4, 0x64, 0x30, 0x4c, 0x46, 0x72, 0x8b, 0x12, 0x83, 0x93, 0x2d, 0x97,
	0x40, 0x66, 0xbe, 0x5e, 0x7a, 0x51, 0x41, 0xb2, 0x5e, 0x6a, 0x45, 0x62, 0x6e, 0x41, 0x4e, 0x6a,
	0x71, 0x14, 0xdc, 0xd7, 0x8b, 0x98, 0x98, 0x3d, 0x7c, 0xc2, 0x57, 0x31, 0x49, 0xb8, 0xe7, 0xe7,
	0xa7, 0xe7, 0xa4, 0xea, 0x05, 0x80, 0x02, 0x25, 0xa9, 0x34, 0x0d, 0x6e, 0x66, 0x12, 0x1b, 0x38,
	0x9c, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x86, 0x52, 0x4f, 0x41, 0x01, 0x00, 0x00,
}
