// Code generated by protoc-gen-go.
// source: CurrencyContract.proto
// DO NOT EDIT!

/*
Package currencies is a generated protocol buffer package.

It is generated from these files:
	CurrencyContract.proto

It has these top-level messages:
	Currency
	CurrenciesResponse
	CurrenciesRequest
*/
package currencies

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Currency struct {
	Id   int64  `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Code string `protobuf:"bytes,3,opt,name=Code" json:"Code,omitempty"`
}

func (m *Currency) Reset()                    { *m = Currency{} }
func (m *Currency) String() string            { return proto.CompactTextString(m) }
func (*Currency) ProtoMessage()               {}
func (*Currency) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CurrenciesResponse struct {
	Currencies []*Currency `protobuf:"bytes,1,rep,name=Currencies" json:"Currencies,omitempty"`
}

func (m *CurrenciesResponse) Reset()                    { *m = CurrenciesResponse{} }
func (m *CurrenciesResponse) String() string            { return proto.CompactTextString(m) }
func (*CurrenciesResponse) ProtoMessage()               {}
func (*CurrenciesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CurrenciesResponse) GetCurrencies() []*Currency {
	if m != nil {
		return m.Currencies
	}
	return nil
}

type CurrenciesRequest struct {
}

func (m *CurrenciesRequest) Reset()                    { *m = CurrenciesRequest{} }
func (m *CurrenciesRequest) String() string            { return proto.CompactTextString(m) }
func (*CurrenciesRequest) ProtoMessage()               {}
func (*CurrenciesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*Currency)(nil), "currencies.Currency")
	proto.RegisterType((*CurrenciesResponse)(nil), "currencies.CurrenciesResponse")
	proto.RegisterType((*CurrenciesRequest)(nil), "currencies.CurrenciesRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for CurrencyService service

type CurrencyServiceClient interface {
	GetAll(ctx context.Context, in *CurrenciesRequest, opts ...grpc.CallOption) (*CurrenciesResponse, error)
}

type currencyServiceClient struct {
	cc *grpc.ClientConn
}

func NewCurrencyServiceClient(cc *grpc.ClientConn) CurrencyServiceClient {
	return &currencyServiceClient{cc}
}

func (c *currencyServiceClient) GetAll(ctx context.Context, in *CurrenciesRequest, opts ...grpc.CallOption) (*CurrenciesResponse, error) {
	out := new(CurrenciesResponse)
	err := grpc.Invoke(ctx, "/currencies.CurrencyService/GetAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CurrencyService service

type CurrencyServiceServer interface {
	GetAll(context.Context, *CurrenciesRequest) (*CurrenciesResponse, error)
}

func RegisterCurrencyServiceServer(s *grpc.Server, srv CurrencyServiceServer) {
	s.RegisterService(&_CurrencyService_serviceDesc, srv)
}

func _CurrencyService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CurrenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CurrencyServiceServer).GetAll(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _CurrencyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "currencies.CurrencyService",
	HandlerType: (*CurrencyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _CurrencyService_GetAll_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x73, 0x2e, 0x2d, 0x2a,
	0x4a, 0xcd, 0x4b, 0xae, 0x74, 0xce, 0xcf, 0x2b, 0x29, 0x4a, 0x4c, 0x2e, 0xd1, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0xe2, 0x4a, 0x86, 0x88, 0x67, 0xa6, 0x16, 0x2b, 0x19, 0x71, 0x71, 0xc0, 0x54,
	0x09, 0x71, 0x71, 0x31, 0x79, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x30, 0x0b, 0xf1, 0x70, 0xb1,
	0xf8, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x01, 0x79, 0x9c, 0x20, 0x9e, 0x73, 0x7e, 0x4a, 0xaa, 0x04,
	0x33, 0x88, 0xa7, 0x64, 0xc7, 0x25, 0xe4, 0x0c, 0x37, 0x21, 0x28, 0xb5, 0xb8, 0x20, 0x3f, 0xaf,
	0x38, 0x55, 0x48, 0x83, 0x8b, 0x0b, 0x21, 0x0a, 0x34, 0x85, 0x59, 0x83, 0xdb, 0x48, 0x44, 0x0f,
	0x61, 0x95, 0x1e, 0xcc, 0x1e, 0x25, 0x61, 0x2e, 0x41, 0x64, 0xfd, 0x85, 0xa5, 0xa9, 0xc5, 0x25,
	0x46, 0x31, 0x5c, 0xfc, 0x30, 0x05, 0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x42, 0x9e, 0x5c,
	0x6c, 0xee, 0xa9, 0x25, 0x8e, 0x39, 0x39, 0x42, 0xb2, 0x58, 0xcc, 0x41, 0xe8, 0x95, 0x92, 0xc3,
	0x25, 0x0d, 0x71, 0x9a, 0x12, 0x83, 0x93, 0x23, 0x97, 0x40, 0x66, 0xbe, 0x5e, 0x7a, 0x51, 0x41,
	0xb2, 0x5e, 0x6a, 0x45, 0x62, 0x6e, 0x41, 0x4e, 0x6a, 0x71, 0x14, 0x52, 0x30, 0x2c, 0x62, 0x62,
	0xf6, 0xf0, 0x09, 0x5f, 0xc5, 0x24, 0xe5, 0x9e, 0x9f, 0x9f, 0x9e, 0x93, 0xaa, 0x17, 0x00, 0x0a,
	0xa7, 0xa4, 0xd2, 0x34, 0x24, 0x73, 0x93, 0xd8, 0xc0, 0x81, 0x67, 0x0c, 0x08, 0x00, 0x00, 0xff,
	0xff, 0x46, 0xc7, 0x6d, 0x64, 0x56, 0x01, 0x00, 0x00,
}
